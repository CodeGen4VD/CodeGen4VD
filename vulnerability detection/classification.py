#使用机器学习分类
from pyexpat import features
from tkinter import Label
import csv
import numpy as np
import random
from sklearn.model_selection import KFold
from sklearn.metrics import f1_score, precision_score, accuracy_score, recall_score
import os
import sys
sys.path.append('.')

def csv_to_dict_test(llm_csv,test_dict):
    reader_c = csv.reader(open(llm_csv, 'r'))
    for r in reader_c:
        if r[0]!='file_name':
            file_name = r[0]
            if(file_name in test_dict.keys()):
                test_dict[file_name] += list(r[1:])
            else:
                test_dict[file_name] = list(r[1:])
      

def csv_to_dict(llm_csv,af_dict,b4_dict):
    reader_c = csv.reader(open(llm_csv, 'r'))
    for r in reader_c:
        l = len(r)+1
        middle = int(l/2)
        if r[0]!='file_name':
            file_name = r[0]
            if(file_name[-2:] != '.c'):
                file_name+='.c'
            if(file_name in af_dict.keys()):
                af_dict[file_name] += list(r[1:middle])
                b4_dict[file_name] += list(r[middle:])
            else:
                af_dict[file_name] = list(r[1:middle])
                b4_dict[file_name] = list(r[middle:])


def random_features(vectors, labels):
    Vec_Lab = []
    for i in range(len(vectors)):
        vec = vectors[i]
        lab = labels[i]
        vec.append(lab)
        Vec_Lab.append(vec)
    random.shuffle(Vec_Lab)
    return [m[:-1] for m in Vec_Lab],[m[-1] for m in Vec_Lab]#features,Labels


from sklearn.ensemble import RandomForestClassifier
def randomforest(train_features,train_labels,test_features,test_labels):

    train_X, train_Y = np.array(train_features), np.array(train_labels)
    test_X, test_Y= np.array(test_features), np.array(test_labels)

    clf = RandomForestClassifier(max_depth=8, random_state=0)
    clf.fit(train_X, train_Y)
    y_pred = clf.predict(test_X)

    print('--------> randomforest:')
    # print(test_Y)
    # print(y_pred)
    return y_pred

from sklearn.svm import SVC
def svm(train_features,train_labels,test_features,test_labels):
    train_X, train_Y = np.array(train_features), np.array(train_labels)
    test_X, test_Y= np.array(test_features), np.array(test_labels)

    clf = SVC(kernel='linear')
    clf.fit(train_X, train_Y)
    y_pred = clf.predict(test_X)

    print('--------> SVM')
    # print(test_Y)
    # print(y_pred)
    return y_pred
            
from sklearn.naive_bayes import GaussianNB
def naive_bayes(train_features,train_labels,test_features,test_labels):
    train_X, train_Y = np.array(train_features), np.array(train_labels)
    test_X, test_Y= np.array(test_features), np.array(test_labels)
    
    clf = GaussianNB()
    clf.fit(train_X, train_Y)
    y_pred = clf.predict(test_X)

    print('--------> Naive Bayes')
    # print(test_Y)
    # print(y_pred)
    return y_pred

from sklearn.linear_model import LogisticRegression
def logistic_regression(train_features,train_labels,test_features,test_labels):
    train_X, train_Y = np.array(train_features), np.array(train_labels)
    test_X, test_Y= np.array(test_features), np.array(test_labels)
    
    clf = LogisticRegression()
    clf.fit(train_X, train_Y)
    y_pred = clf.predict(test_X)

    print('--------> logistic_regression')
    # print(test_Y)
    # print(y_pred)
    return y_pred

from sklearn.ensemble import GradientBoostingRegressor
def GBDT(train_features,train_labels,test_features,test_labels):
    train_X, train_Y = np.array(train_features), np.array(train_labels)
    test_X, test_Y= np.array(test_features), np.array(test_labels)
    clf = GradientBoostingRegressor(random_state=110)
    clf.fit(train_X, train_Y)
    y_socres = clf.predict(test_X)
    y_pred = np.around(y_socres,0).astype(int)

    print('--------> GBDT')
    # print(test_Y)
    # print(y_pred)        
    return y_pred

def classification(train_features,train_labels,test_features,test_labels):
    train_features, train_labels = random_features(train_features, train_labels)
    ml_result = dict()
    
    ml_result['randomforest'] = randomforest(train_features,train_labels,test_features,test_labels)

    ml_result['Naive Bayes'] = naive_bayes(train_features,train_labels,test_features,test_labels)

    ml_result['SVM'] = svm(train_features,train_labels,test_features,test_labels)

    ml_result['Logistic_regression'] = logistic_regression(train_features,train_labels,test_features,test_labels)

    ml_result['GBDT'] = GBDT(train_features,train_labels,test_features,test_labels)

    return ml_result

def main():
    llms = ['codellama','codeshell','stablecode','starcoder']
    test_path = '/home/llm/data/cmp/test'
    mod_types = ['del_add','add']
    train_path = "/home/llm/data/cmp/train/"
    test_dict = dict()
    af_dict = dict()
    b4_dict = dict()

    for llm in llms:
        csv_file = os.path.join(test_path,llm+'_cmp.csv')
        csv_to_dict_test(csv_file,test_dict)

    test_keys = []
    test_file = []
    test_Features = []
    test_labels = []
    cnt1 = 0
    cnt0 = 0
    for key,value in test_dict.items():
        if(len(value)==20):
            test_keys.append(key)
            file_name = key[key.find('_')+1:]
            lable = int(file_name.split('_')[0])
            if file_name not in test_file:
                if lable == 1:
                    cnt1+=1
                else:
                    cnt0+=1
                test_file.append(file_name)
            test_Features.append(value)
            test_labels.append(lable)
    print(cnt0)
    print(cnt1)
            
    test_features = []
    for feature in test_Features:
        feature = list(map(float,feature))
        test_features.append(feature)

    for mod_type in mod_types:
        for llm in llms:
            csv_file = os.path.join(train_path,mod_type,llm+'_cmp.csv')
            csv_to_dict(csv_file,af_dict,b4_dict)


    af_features = []
    b4_features = []
    train_labels = []
    for key,value in af_dict.items():
        if(len(value)==20):
            file_name = '0_'+ key
            if file_name not in test_file:
                af_features.append(value)
                train_labels.append(0)
    print(len(af_features))

    for key,value in b4_dict.items():
        if(len(value)==20):
            file_name = '1_'+ key
            if file_name not in test_file:
                b4_features.append(value)
                train_labels.append(1)
    print(len(b4_features))

    train_features = []
    for feature in af_features+b4_features:
        feature = list(map(float,feature))
        train_features.append(feature)

    ml_result = dict()
    ml_result = classification(train_features,train_labels,test_features,test_labels)

    with open('/home/llm/data/res/ml_pre.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['file_name','lable','randomforest','Naive Bayes','SVM','Logistic_regression','GBDT'])
        for i in range(len(test_keys)):
            row = [test_keys[i],test_labels[i]]
            for key,value in ml_result.items():
                row.append(value[i])
            writer.writerow(row)

if __name__ == '__main__':
    main()