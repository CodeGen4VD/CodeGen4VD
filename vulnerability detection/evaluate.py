import pandas as pd
from sklearn.metrics import f1_score, precision_score, accuracy_score, recall_score
import numpy as np
import csv

def evaluate(lable,pre):
    test_Y = np.array(lable)
    y_pred = np.array(pre)

    f1 = f1_score(y_true=test_Y, y_pred=y_pred)
    precision = precision_score(y_true=test_Y, y_pred=y_pred)
    recall = recall_score(y_true=test_Y, y_pred=y_pred)
    accuracy = accuracy_score(y_true=test_Y, y_pred=y_pred)

    TP = np.sum(np.multiply(test_Y, y_pred))
    FP = np.sum(np.logical_and(np.equal(test_Y, 0), np.equal(y_pred, 1)))
    FN = np.sum(np.logical_and(np.equal(test_Y, 1), np.equal(y_pred, 0)))
    TN = np.sum(np.logical_and(np.equal(test_Y, 0), np.equal(y_pred, 0)))

    TPR = TP / (TP + FN)
    FPR = FP / (FP + TN)
    TNR = TN / (TN + FP)
    FNR = FN / (TP + FN)
    return [f1, precision, recall, accuracy, TPR, FPR, TNR, FNR]


def main():
    function_level = ['one','two','three','four','five']
    pre_path = '/home/llm/data/res/ml_pre.csv'
    pd_pre = pd.read_csv(pre_path)
    file_names = list(pd_pre['file_name'])
    file_lable = pd_pre['lable']
    randforest = pd_pre['randomforest']
    Naive_Bayes = pd_pre['Naive Bayes']
    svm = pd_pre['SVM']
    Logistic_regression = pd_pre['Logistic_regression']
    GBDT = pd_pre['GBDT']

    for k in range(1,6):
        lable = []
        randforest_test = []
        Naive_Bayes_test = []
        svm_test = []
        log_reg_test = []
        GBDT_test = []
        function_list = []
        for file_name in file_names:
            function_name = file_name[file_name.find('_')+1:]
            if function_name not in function_list:
                function_list.append(function_name)
                for i in range(k):
                    try:
                        index = file_names.index(function_level[i] + '_' + function_name)
                    except:
                        break
                    if i == 0:
                        lable.append(file_lable[index])
                        randforest_test.append(randforest[index])
                        Naive_Bayes_test.append(Naive_Bayes[index])
                        svm_test.append(svm[index])
                        log_reg_test.append(Logistic_regression[index])
                        GBDT_test.append(GBDT[index])
                    else:
                        randforest_test[-1] = 1 if randforest_test[-1] or randforest[index] else 0
                        Naive_Bayes_test[-1] = 1 if Naive_Bayes_test[-1] or Naive_Bayes[index] else 0
                        svm_test[-1] = 1 if svm_test[-1] or svm[index] else 0
                        log_reg_test[-1] = 1 if log_reg_test[-1] or Logistic_regression[index] else 0
                        GBDT_test[-1] = 1 if GBDT_test[-1] or GBDT[index] else 0


        
        csv_data = []
        csv_data.append(['ML_Algorithm', 'F1', 'Precision', 'Recall', 'Accuracy', 'TPR', 'FPR', 'TNR', 'FNR'])
        csv_data.append(['randomforest']+evaluate(lable,randforest_test))
        csv_data.append(['Naive Bayes']+evaluate(lable,Naive_Bayes_test))
        csv_data.append(['SVM']+evaluate(lable,svm_test))
        csv_data.append(['Logistic_regression']+evaluate(lable,log_reg_test))
        csv_data.append(['GBDT']+evaluate(lable,GBDT_test))

        with open('/home/llm/data/res' + str(k) + '_result.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerows(csv_data)

if __name__ == '__main__':
    main()